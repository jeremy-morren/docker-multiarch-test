# This workflow builds a multi-arch Docker image using GitHub Actions and separated Github Runners with native support for ARM64 and AMD64 architectures, without using QEMU emulation.
# It uses Docker Buildx to build and push the image to GitHub Container Registry (GHCR).
name: Build multi arch Docker Image with separate Github Runners

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  # The name of the Docker image to be built and pushed to GHCR
  # The image name is derived from the GitHub repository name and the GitHub Container Registry (GHCR) URL.
  # The image name will be in the format: ghcr.io/<owner>/<repo>
  GHCR_IMAGE: ghcr.io/${{ github.repository }}

permissions:
  # Global permissions for the workflow, which can be overridden at the job level
  contents: read

concurrency:
  # This concurrency group ensures that only one job in the group runs at a time.
  # If a new job is triggered, the previous one will be canceled.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows:
    permissions:
      packages: write

    runs-on: windows-latest
    name: Build Docker image for Windows

    env:
      GHCR_TAG: ${{ github.run_id }}-windows
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - run: dotnet publish src/HelloWorldApi/HelloWorldApi.csproj -c Release -o ${{ runner.temp }}/publish
        name: Publish app

      - name: Login to GitHub Container Registry
        uses: docker/login-action@3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta default
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_IMAGE }}

      - name: Build image
        id: build
        shell: pwsh
        # JSON object format: @ { tags: [], labels: [], annotations: []}
        run: |
          $metadata = ConvertFrom-Json $env:DOCKER_METADATA_OUTPUT_JSON
          $args = @()
          foreach ($l in $metadata.labels) {
            $args += @("--label", $l)
          }
          $output = "${{ runner.temp }}/metadata"
          docker build $args `
            --iidfile $output `
            --tag ${{ env.GHCR_IMAGE }}:${{ env.GHCR_TAG }} `
            --platform "windows/amd64" `
            --file "${env:dockerfile}.${env:dockerfileExt}" `
            $env:context

          if ($LASTEXITCODE -ne 0) {
            exit $LASTEXITCODE
          }
          
          $digest = Get-Content $output
          docker image inspect $digest

          $id = $digest.TrimStart("sha256:")
          Add-Content -Value "imageId=${id}" -Path $env:GITHUB_OUTPUT

        env:
          # context: ${{ runner.temp }}/publish
          context: ${{ runner.temp }}
          dockerfile: src/HelloWorldApi/Dockerfile.windows

      - name: Push Image
        run: docker push ${{ env.GHCR_IMAGE }}:${{ env.GHCR_TAG }}
        
      - name: Get image digest
        id: get-digest
        run: |
          $digest = docker image inspect ${{ env.GHCR_IMAGE }}:${{ env.GHCR_TAG }} --format '{{ index .RepoDigests 0 }}'
          $digest = $digest.Split('@')[1].TrimStart("sha256:")
          Add-Content -Value "digest=${digest}" -Path $env:GITHUB_OUTPUT
          
      - name: Export digest
        shell: pwsh
        run: |
          mkdir ${{ runner.temp }}/digests
          Set-Content -Value "" -Path ${{ runner.TEMP }}/digests/${{ steps.get-digest.outputs.digest }}

      - name: Upload digest 
        uses: actions/upload-artifact@4.6.2
        with:
          name: digests-${{ steps.build.outputs.platform }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  build-linux:
    permissions:
      packages: write

    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
  
    runs-on: >-
      ${{ matrix.platform == 'linux/amd64' && 'ubuntu-latest' ||
          matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - run: dotnet publish src/HelloWorldApi/HelloWorldApi.csproj -c Release -o ${{ runner.temp }}/publish
        name: Publish app

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: docker context create builders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@3.10.0
        with:
          endpoint: builders
          platforms: ${{ matrix.platform }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        # This step builds and pushes the Docker image using Buildx.
        # It uses the docker/build-push-action to build the image with the specified context and platforms.
        # The image is built with the labels and annotations generated in the previous steps.
        # The outputs are configured to push the image by digest, which allows for better caching and versioning.
        # The cache-from and cache-to options are used to enable caching for the build process.
        # The cache is stored in GitHub Actions cache and is scoped to the repository, branch, and platform.
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          file: src/HelloWorldApi/Dockerfile.linux
          context: ${{ runner.temp }}/publish
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=true,oci-mediatypes=true
          no-cache: true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - id: prepare
        name: Prepare platform pair
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Upload digest
        uses: actions/upload-artifact@4.6.2
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1


  merge:
    # This job merges the Docker manifests for the different platforms built in the previous job.
    name: Merge Docker manifests
    runs-on: ubuntu-latest
    permissions:
      attestations: write
      packages: write

    needs:
      - build-linux
      - build-windows
      
    steps:
      - name: Download digests
        # This step downloads the digest files uploaded in the build job.
        # It uses the actions/download-artifact action to download the artifacts with the pattern digests-*.
        # The downloaded files are merged into the /tmp/digests directory.
        uses: actions/download-artifact@4.3.0
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true


      - name: Docker meta
        # This step generates metadata for the Docker image.
        # It uses the docker/metadata-action to create metadata based on the repository information.
        # The metadata includes information such as the image name, tags, and labels.
        id: meta
        uses: docker/metadata-action@5.7.0
        with:
          images: ${{ env.GHCR_IMAGE }}
          annotations: |
            type=org.opencontainers.image.description,value=${{ github.event.repository.description || 'No description provided' }}
          tags: |
            type=raw,value=main,enable=${{ github.ref_name == 'main' }}
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@3.10.0
        # This step sets up Docker Buildx, which is a Docker CLI plugin for extended build capabilities with BuildKit.
        with:
          driver-opts: |
            network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@3.4.0
        # This step logs in to the GitHub Container Registry (GHCR) using the docker/login-action.
        # It uses the GitHub actor's username and the GITHUB_TOKEN secret for authentication.
        # The login is necessary to push the merged manifest list to GHCR.
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get execution timestamp with RFC3339 format
        # This step gets the current execution timestamp in RFC3339 format.
        # It uses the date command to get the current UTC time and formats it as a string.
        # The timestamp is used for annotating the Docker manifest list.
        id: timestamp
        run: |
          echo "timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      - name: Create manifest list and pushs
        # This step creates a manifest list for the Docker images built for different platforms.
        # It uses the docker buildx imagetools create command to create the manifest list.
        # The manifest list is annotated with metadata such as description, creation timestamp, and source URL.
        # The annotations are obtained from the metadata generated in the previous steps.
        # The manifest list is pushed to the GitHub Container Registry (GHCR) with the specified tags.
        working-directory: /tmp/digests
        id: manifest-annotate
        continue-on-error: true
        run: |
              docker buildx imagetools create \
                $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
                --annotation='index:org.opencontainers.image.description=${{ github.event.repository.description }}' \
                --annotation='index:org.opencontainers.image.created=${{ steps.timestamp.outputs.timestamp }}' \
                --annotation='index:org.opencontainers.image.url=${{ github.event.repository.url }}' \
                --annotation='index:org.opencontainers.image.source=${{ github.event.repository.url }}' \
                $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)

      - name: Create manifest list and push without annotations
        # This step creates a manifest list for the Docker images built for different platforms.
        # It uses the docker buildx imagetools create command to create the manifest list.
        # The manifest list is created without annotations if the previous step fails.
        # The manifest list is pushed to the GitHub Container Registry (GHCR) with the specified tags.
        if: steps.manifest-annotate.outcome == 'failure'
        working-directory: /tmp/digests
        run: |
              docker buildx imagetools create  $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
                $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        # This step inspects the created manifest list to verify its contents.
        # It uses the docker buildx imagetools inspect command to display information about the manifest list.
        # The inspection output will show the platforms and tags associated with the manifest list.
        id: inspect
        run: |
          docker buildx imagetools inspect '${{ env.GHCR_IMAGE }}:${{ steps.meta.outputs.version }}'


  
  test:
    needs: [merge]
    permissions:
      packages: read

    strategy:
      fail-fast: false
      matrix:
        runs-on:
          - ubuntu-latest
          - ubuntu-24.04-arm
          - windows-latest
    
    runs-on: ${{ matrix.runs-on }}
    steps:
      - run: docker run -d -p 8080:8080 "${{ env.GHCR_IMAGE }}:latest"

      - run: curl -i http://localhost:8080/hello-world
        name: Test API